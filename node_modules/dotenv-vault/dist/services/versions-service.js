"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VersionsService = void 0;
const tslib_1 = require("tslib");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const axios_1 = tslib_1.__importDefault(require("axios"));
const vars_1 = require("../vars");
const core_1 = require("@oclif/core");
const append_to_ignore_service_1 = require("../services/append-to-ignore-service");
const log_service_1 = require("../services/log-service");
const abort_service_1 = require("../services/abort-service");
const login_service_1 = require("../services/login-service");
class VersionsService {
    constructor(attrs = {}) {
        this.cmd = attrs.cmd;
        this.environment = attrs.environment;
        this.dotenvMe = attrs.dotenvMe;
        this.yes = attrs.yes;
        this.log = new log_service_1.LogService({ cmd: attrs.cmd });
        this.abort = new abort_service_1.AbortService({ cmd: attrs.cmd });
        this.login = new login_service_1.LoginService({ cmd: attrs.cmd, dotenvMe: null, yes: this.yes });
    }
    async run() {
        new append_to_ignore_service_1.AppendToIgnoreService().run();
        if (vars_1.vars.missingEnvVault) {
            this.abort.missingEnvVault();
        }
        if (vars_1.vars.emptyEnvVault) {
            this.abort.emptyEnvVault();
        }
        if (vars_1.vars.missingEnvMe(this.dotenvMe)) {
            await this.login.login(false);
        }
        if (vars_1.vars.emptyEnvMe(this.dotenvMe)) {
            await this.login.login(false);
        }
        let versionsMsg = 'Listing versions';
        if (this.smartEnvironment) {
            versionsMsg = `Listing ${this.smartEnvironment} versions`;
        }
        core_1.CliUx.ux.action.start(`${chalk_1.default.dim(this.log.pretextRemote)}${versionsMsg}`);
        await this.versions();
    }
    async versions() {
        const options = {
            method: 'POST',
            headers: { 'content-type': 'application/json' },
            data: {
                environment: this.smartEnvironment,
                projectUid: vars_1.vars.vaultValue,
                meUid: this.meUid,
            },
            url: this.url,
        };
        try {
            const resp = await (0, axios_1.default)(options);
            const versions = resp.data.data.versions;
            const environment = resp.data.data.environment;
            core_1.CliUx.ux.action.stop();
            core_1.CliUx.ux.table(versions, {
                version: {
                    header: 'Ver',
                    minWidth: 7,
                },
                change: {
                    header: 'Change',
                },
                by: {
                    header: 'By',
                },
                when: {
                    header: 'When',
                },
            });
            this.log.plain('');
            this.log.plain(`Pull a version with ${chalk_1.default.bold(`${vars_1.vars.cli} pull ${environment}@${versions[0].version}`)}`);
        }
        catch (error) {
            core_1.CliUx.ux.action.stop('aborting');
            let errorMessage = null;
            let errorCode = 'VERSIONS_ERROR';
            let suggestions = [];
            errorMessage = error;
            if (error.response) {
                errorMessage = error.response.data;
                if (error.response.data && error.response.data.errors && error.response.data.errors[0]) {
                    const error1 = error.response.data.errors[0];
                    errorMessage = error1.message;
                    if (error1.code) {
                        errorCode = error1.code;
                    }
                    if (error1.suggestions) {
                        suggestions = error1.suggestions;
                    }
                }
            }
            this.abort.error(errorMessage, { code: errorCode, ref: '', suggestions: suggestions });
        }
    }
    get url() {
        return vars_1.vars.apiUrl + '/versions';
    }
    get smartEnvironment() {
        // 1. if user has set an environment for input then use that
        if (this.environment) {
            return this.environment;
        }
        return null; // otherwise, do not pass environment. dotenv-vault's api will smartly choose the main environment for the project (in most cases development)
    }
    get meUid() {
        return this.dotenvMe || vars_1.vars.meValue;
    }
}
exports.VersionsService = VersionsService;
